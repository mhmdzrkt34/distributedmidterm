# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'distributed midterm pool'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: VSTest@2
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
- script: |
    docker build -t mhmdzrkt34/sampledotnetapi:$(Build.BuildId) .
  displayName: 'Build Docker Image'

- script: |
    docker login -u $(dockerHubUsername) -p $(dockerHubPassword)
    docker push mhmdzrkt34/sampledotnetapi:$(Build.BuildId)
  displayName: 'Push Docker Image to Docker Hub'  
- task: AzureWebAppContainer@1
  inputs:
    azureSubscription: '<AzureSubscriptionConnection>'
    appName: 'my-dotnet-webapi-app'                        # Replace with your App Service name
    containerRegistry: 'Docker Hub'                         # Public Docker Hub registry
    repository: 'mhmdzrkt34/sampledotnetapi'                # Replace with your Docker Hub repo name
    tag: '$(Build.BuildId)'                                 # Use the same tag as in the Docker build
